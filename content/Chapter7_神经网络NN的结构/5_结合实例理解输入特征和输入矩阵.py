# _*_ coding=utf-8 _*_

"""
输入矩阵的形状通常为 (batch_size, input_features)，input_features 是指输入数据的特征维度，即每个样本有多少个特征。对于不同类型的任务，input_features 可以代表不同的含义。以下是一些示例

一、猫狗分类任务（二分类）：
假设我们有一个彩色图像数据集，图像尺寸为 64x64 像素。在这种情况下，input_features 为 64 * 64 * 3 = 12,288。每个输入样本都是一个 12,288 维的向量，表示图像的像素值。在这个任务中，神经网络的目标是根据输入图像的特征来预测图像是猫还是狗。

X = [[255, 128, 64, ..., 0],  # 图像1的像素值，总共12,288个元素
     [0, 64, 128, ..., 255]]  # 图像2的像素值，总共12,288个元素

输入矩阵的形状为 (2, 12,288)。

标签可以是二进制值，其中 0 表示猫，1 表示狗。例如：

y = [0, 1]  # 第一个样本是猫，第二个样本是狗

二、手写数字识别任务（多分类）：
在这个任务中，我们使用一个灰度图像数据集，例如经典的 MNIST 数据集。图像尺寸为 28x28 像素，因此 input_features 为 28 * 28 = 784。
神经网络需要根据输入的手写数字图像来预测该数字是 0 到 9 之间的哪一个。

使用一个简化的 MNIST 数据集，包含两个 28x28 像素的灰度图像样本：

X = [[0, 0, 255, ..., 0],  # 图像1的像素值，总共784个元素
     [255, 255, 0, ..., 0]]  # 图像2的像素值，总共784个元素

输入矩阵的形状为 (2, 784)。

标签可以是一个整数值，表示数字类别。例如：

y = [2, 9]  # 第一个样本是数字 2，第二个样本是数字 9

三、房价预测任务（回归）：
假设我们有一个房价预测任务，输入特征包括房子的面积、卧室数量、卫生间数量、地理位置等。在这种情况下，input_features 可能为 4（如果我们只考虑这四个特征）。神经网络需要根据这些输入特征来预测房价。

假设我们有一个简化的数据集，包含两个房子样本：

X = [[1200, 3, 2, 0.5],  # 房子1的特征：面积、卧室数量、卫生间数量、地理位置
     [1800, 4, 3, 0.2]]  # 房子2的特征：面积、卧室数量、卫生间数量、地理位置

输入矩阵的形状为 (2, 4)。标签可以是一个实数值，表示房价。例如：

y = [300000, 450000]  # 第一个样本的房价为 300,000，第二个样本的房价为 450,000

四、标签预测任务（多标签）：
假设我们有一个文本分类任务，输入为一篇文章的词向量，每个词向量的维度为 10。如果我们考虑文章的前 10 个词（假设文本已经进行了预处理和截断），那么 input_features 为 10 * 10 = 100。这个任务中，神经网络需要根据输入的文章特征来预测多个标签（如“科技”、“体育”、“娱乐”等）。

假设我们有一个简化的数据集，包含两篇文章的词向量：

X = [[0.1, 0.2, 0.3, ..., 0.8],  # 文章1的前10个词的词向量，总共100个元素
     [0.2, 0.3, 0.1, ..., 0.6]]  # 文章2的前10个词的词向量，总共100个元素

输入矩阵的形状为 (2, 100)。

标签可以是一个二进制向量，其中每个元素表示一个标签是否存在。例如：

y = [[1, 0, 1],  # 第一个样本的标签为“科技”和“娱乐”
     [0, 1, 0]]  # 第二个样本的标签为“体育”

五、金融数据分析（二分类）
预测投资组合是否会在未来一段时间内获得正收益。
每个输入样本表示10个股票的5个特征（开盘价、收盘价、最高价、最低价和交易量）。这里我们使用随机生成的数据来模拟这些特征。

X = [[23.5, 24.1, 24.8, 23.2, 1000000,
      50.2, 51.3, 51.5, 49.8,  500000,
      15.3, 15.6, 16.1, 15.1,  200000,
      ...
      37.2, 38.0, 38.5, 36.9,  800000],

     [25.1, 25.5, 26.0, 24.9,  900000,
      52.3, 53.1, 53.7, 51.9,  550000,
      16.2, 16.4, 17.0, 15.9,  250000,
      ...
      39.8, 40.2, 40.7, 39.4,  850000],

     ...

     [26.8, 27.3, 27.9, 26.2, 1100000,
      54.1, 55.2, 55.5, 53.8,  600000,
      17.5, 17.9, 18.4, 17.0,  300000,
      ...
      42.0, 42.6, 43.1, 41.5,  950000]]

输入矩阵的形状为 (4, 50)。标签为二进制值，表示投资组合是否会在未来一段时间内获得正收益，例如：y = [1, 0, 1, 1]。

六、金融数据（回归任务）
预测投资组合在未来一段时间内的收益率。
每个输入样本表示10个股票的5个特征（开盘价、收盘价、最高价、最低价和交易量）。这里我们使用随机生成的数据来模拟这些特征。

使用相同的输入特征矩阵 X。标签表示投资组合在未来一段时间内的预期收益率，例如：y = [0.05, -0.02, 0.03, 0.07]。

七、金融数据（多分类）
预测投资组合在未来一段时间内的收益等级（如高、中、低）。
每个输入样本表示10个股票的5个特征（开盘价、收盘价、最高价、最低价和交易量）。这里我们使用随机生成的数据来模拟这些特征。

同样使用相同的输入特征矩阵 X。标签表示投资组合在未来一段时间内的收益等级（如高、中、低）。例如，我们可以将预期收益率划分为三个等级：
y = [2, 0, 1, 2]，其中 0 表示低收益，1 表示中等收益，2 表示高收益。
"""