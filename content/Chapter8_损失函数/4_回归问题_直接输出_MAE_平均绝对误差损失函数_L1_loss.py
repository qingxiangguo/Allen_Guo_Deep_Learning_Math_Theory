# _*_ coding=utf-8 _*_

"""
MAE（Mean Absolute Error）损失函数，也叫 L1 损失函数，是一种常用于回归问题的损失函数。它衡量了模型预测值与真实值之间的绝对误差的平均值。
计算公式为：

MAE = (1/n) * ∑|y_pred - y_true|

其中，y_pred 是模型的预测值，y_true 是真实值，n 是样本数量。

MAE 损失函数被称为 L1 损失，是因为它计算的是预测值与真实值之间的 L1 距离，也就是它们之差的绝对值之和。L1 距离在数学中也被称为曼哈顿距离。

相比于平方误差（例如 MSE 或 L2 损失），MAE 更加关注预测误差的平均水平，而不是它们的平方。这使得 MAE 对于异常值不敏感，因为它不会对大的误差
给予过高的权重。在某些回归问题中，使用 MAE 损失函数可能更合适，因为它能更好地处理存在异常值的数据集。例如，在预测房价时，如果数据集中存在
一些异常高或异常低的房价，使用 MAE 损失函数可能会得到更稳定的模型，因为它不会过分关注那些异常值。

总之，MAE 损失函数（L1 损失）是一种用于回归问题的损失函数，它计算模型预测值与真实值之间的绝对误差的平均值。相较于平方误差损失函数（
例如 MSE 或 L2 损失），它对异常值不敏感，适用于处理存在异常值的数据集。在实际应用中，可以根据数据集的特点和问题需求来选择合适的损失函数。

------------------------------------------------------------------------------------------

为什么MAE 对于异常值不敏感？为什么它计算的是预测值与真实值之间的 L1 距离？L1距离的定义是什么？

我们说 MAE 对异常值不敏感时，是相对于 MSE（平均平方误差）而言的。MAE 对异常值不敏感的原因在于它计算的是预测值与真实值之间的绝对误差，而不是它们的平方误差。

在 MAE 中，每个误差的权重是线性的，而在 MSE 中，误差的权重是平方的。这意味着在 MSE 中，较大的误差将得到更高的权重，因为它们被平方。相反，在 MAE 中，每个误差的权重是线性的，因此较大的误差不会受到过多关注。这使得 MAE 更能够抵抗异常值的影响。

L1 距离是指两个点在某个度量空间中的距离，它计算的是这两个点在每个维度上差值的绝对值之和。L1 距离的定义如下：

L1(点A, 点B) = ∑|A_i - B_i|

其中，A_i 和 B_i 分别表示点 A 和点 B 在第 i 个维度上的坐标。

在 MAE 损失函数的情况下，我们只关心一个维度（即预测值和真实值之间的差异），因此 L1 距离就等于预测值与真实值之差的绝对值。这就是为什么
 MAE 计算的是预测值与真实值之间的 L1 距离。

通俗地说，MAE 对异常值不敏感，是因为它关注的是预测值和真实值之间差异的绝对值，而不是平方值。这使得较大的误差不会得到过高的权重，
从而让模型更能抵抗异常值的影响。而 L1 距离可以看作是在多个维度上的 MAE，它计算的是两个点在各个维度上差值的绝对值之和。

由于L1 loss具有稀疏性，为了惩罚较大的值，因此常常将其作为正则项添加到其他loss中作为约束，L1 loss最大的问题是
梯度在0点不平滑，会跳过极小值

-------------------------下面举个具体例子 -----------------------

假设我们有一个简单的神经网络，用于预测房屋价格。我们有一组房屋数据，其中包含每套房子的面积（平方米）和价格。让我们构建一个简单的神经网络，
输入是房屋面积，输出是预测的房价。

假设我们有以下数据集（面积，价格）：

(50, 100000)
(70, 150000)
(100, 200000)
我们将使用这个数据集来训练我们的神经网络。

首先，我们需要定义一个简单的神经网络。这里我们只需要一个单一的神经元，输入是房屋面积，输出是预测的房价。这个神经元将通过线性变换
（权重 w 和偏置 b）来学习房价预测。预测值可以通过以下公式计算：

预测房价 = w * 房屋面积 + b

现在，我们将使用 MAE 损失函数来优化神经网络。对于每个样本，我们需要计算预测房价与实际房价之间的差值的绝对值。然后，我们需要计算这些绝对值的平均值。

对于我们的数据集，我们可以计算每个样本的 MAE 损失：

1. 对于第一个样本 (50, 100000)，假设神经网络预测的房价是 110000：

MAE_1 = |预测房价 - 真实房价| = |110000 - 100000| = 10000

2. 对于第二个样本 (70, 150000)，假设神经网络预测的房价是 140000：

MAE_2 = |预测房价 - 真实房价| = |140000 - 150000| = 10000

3. 对于第三个样本 (100, 200000)，假设神经网络预测的房价是 210000：

MAE_3 = |预测房价 - 真实房价| = |210000 - 200000| = 10000

现在，我们计算整个数据集的平均 MAE 损失：

MAE = (MAE_1 + MAE_2 + MAE_3) / 3 = (10000 + 10000 + 10000) / 3 = 10000

接下来，我们需要通过梯度下降或其他优化算法来优化神经网络的权重 w 和偏置 b，以最小化 MAE 损失。在每次迭代过程中，我们根据损失
的梯度来更新权重 w 和偏置 b。梯度表示损失函数在 w 和 b 上的变化速率。通过反复更新 w 和 b，神经网络会逐渐找到一个较好的预测房价的模型。

优化过程可能包括以下步骤：

用当前的权重 w 和偏置 b 计算每个样本的预测房价。
计算每个样本的 MAE 损失。
计算整个数据集的平均 MAE 损失。
根据损失函数的梯度，更新权重 w 和偏置 b。
重复步骤 1-4，直到损失函数的值收敛，或达到预定的迭代次数。
在训练完成后，神经网络将能够根据输入的房屋面积预测房价。请注意，这个例子非常简单，实际问题可能需要更复杂的神经网络结构和更多的数据。
但是，这个例子展示了如何在回归问题中应用 MAE 损失函数来训练神经网络。
"""