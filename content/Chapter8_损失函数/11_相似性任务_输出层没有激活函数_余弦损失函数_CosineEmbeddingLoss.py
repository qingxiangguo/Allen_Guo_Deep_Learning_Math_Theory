# _*_ coding=utf-8 _*_

"""
CosineEmbeddingLoss
余弦相似度损失函数用于判断输入的两个向量是否相似。这种损失函数通常用于非线性词向量学习以及半监督学习。在这个损失函数中，
我们根据输入向量的标签（相似或不相似）计算损失。

a,b 代表输入的两个向量，y yy代表真实的类别标签，属于{ 1 , − 1 }，分别表示相似与不相似。

当两个向量的标签为相似（yi=1）时，我们希望它们的余弦相似度尽可能地接近1。损失值为1减去余弦相似度，即1 - cos(ai, bi)。
当两个向量完全相似（夹角为0）时，损失值为0。

当两个向量的标签为不相似（yi=-1）时，我们希望它们的余弦相似度尽可能地小于一个给定的阈值（margin）。如果余弦相似度小于阈值，那么损失值为0；
如果余弦相似度大于阈值，那么损失值为cos(ai, bi) - margin。

也就是让相似的更相似，不相似的更不相似

怎么通俗的理解呢？

首先，我们需要明白余弦相似度的范围是[-1, 1]。当两个向量完全相同时，它们的余弦相似度为1；当两个向量完全相反时，它们的余弦相似度为-1；
当两个向量完全无关时，它们的余弦相似度为0。

当两个向量的标签为相似（yi=1）时，我们希望它们的余弦相似度尽可能地接近1。换句话说，我们希望它们的夹角尽可能地接近0。
这样一来，损失值为1减去余弦相似度（1 - cos(ai, bi)），在这种情况下，损失值的范围是[0, 2]。当两个向量完全相似（夹角为0，余弦相似度为1）时，
损失值为0；当两个向量完全相反（夹角为180度，余弦相似度为-1）时，损失值为2。这样，模型会试图让相似的向量的余弦相似度越接近1，损失值越小。

当两个向量的标签为不相似（yi=-1）时，我们希望它们的余弦相似度尽可能地小于一个给定的阈值（margin）。这
里的阈值（margin）是介于-1和1之间的一个数。如果余弦相似度小于阈值，那么损失值为0，意味着模型已经成功地将这两个向量分开了。如果余弦相似度大于阈值，
那么损失值为cos(ai, bi) - margin，这会让模型努力让不相似的向量的余弦相似度降低，从而使损失值减小。

这个损失函数的目的是让相似的向量在空间中靠近，而不相似的向量在空间中远离。通过优化这个损失函数，神经网络可以学会在一个低维空间中有效地表示输入数据，
从而实现诸如文本相似度计算、文本聚类等任务。
------------------------------------------
余弦损失函数不是用于传统的回归、二分类或多分类任务。余弦损失函数主要用于度量相似性的任务。常见的应用场景包括：

词向量学习：在自然语言处理中，我们经常需要将单词表示成固定长度的向量，这样可以方便地度量单词之间的相似性。训练词向量时，
可以使用余弦损失函数来度量单词之间的相似度，从而让语义相似的单词在向量空间中靠近。

文本相似度计算：给定两段文本，我们需要判断它们的语义相似度。通过训练一个神经网络将文本编码成固定长度的向量，然后使用余弦损失
函数度量这两个向量的相似度，可以实现文本相似度计算任务。

图像检索：在图像检索任务中，我们需要找到与给定图像在内容上相似的其他图像。可以训练一个神经网络将图像编码成固定长度的向量，
然后使用余弦损失函数度量向量之间的相似度，从而实现图像检索。

半监督学习：在半监督学习中，我们只有少量的带标签数据和大量的无标签数据。通过训练一个神经网络将输入编码成固定长度的向量，然后使用余弦损失函数度量
带标签样本之间的相似度，可以实现半监督学习任务。
-----------------------------------------------------------
在余弦损失函数中，margin（边缘）是一个超参数，用于控制相似度的阈值。margin主要用于处理不相似（负样本）的情况。
设置margin的目的是在训练过程中为相似和不相似样本之间划定一个界限，从而帮助模型更好地区分这两类样本。

当两个向量的标签为不相似（yi=-1）时，我们希望它们的余弦相似度尽可能地小于margin。这意味着，当两个向量的相似度低于margin时，
我们认为它们足够不相似，损失值为0。而当两个向量的相似度高于margin时，我们希望模型进一步将它们分开，此时损失值为cos(ai, bi) - margin。

---------------------------------------------------------

余弦损失函数通常与线性激活函数（即没有激活函数）一起使用。因为余弦相似度度量的是向量之间的夹角，而不是它们的幅度。
使用线性激活函数可以保持神经网络输出向量的原始方向。

当然，也可以在最后一层使用其他激活函数，例如ReLU或者tanh，但这会导致输出向量的范围发生变化，可能会对余弦相似度计算产生影响。在实际应用中，
根据任务的需求和具体的网络架构，您可以根据需要尝试不同的激活函数。

---------------------------------------------------------------------------------

假设a和b向量的余弦相似度为-0.6，真实标签为-1，不相似，margin 为 0.5，他们的余弦损失函数怎么计算

根据余弦损失函数的定义，当真实标签为 -1 时，我们计算损失值如下：

loss = max(0, cos(a, b) - margin) = max(0, -0.6 - 0.5) = max(0, -1.1) = 0

所以，在这种情况下，余弦损失函数的值为 0。

因为余弦相似度 -0.6，想象两条线，他们的方向已经不相似，很容易区分开来了，所以就没必要去区分了，已经是最佳状态了，所以损失函数=0
不需要进一步优化神经网络来区分它们。因此，损失函数的值为 0，表示神经网络在这个样本上的表现已经是最佳状态。
"""